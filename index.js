import { google } from 'googleapis';
import http from 'http';
import fs from 'fs';
import path from 'path';
import { GoogleGenerativeAI } from '@google/generative-ai';

const aiKey = "AIzaSyBG6zjR6SAc2UfODa_8BIMvKmrfk8QT7hc";

const genAI = new GoogleGenerativeAI(aiKey);
const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

// Dynamically import the `open` package
import('open').then((openModule) => {
  const open = openModule.default;

  makeBlog();
});

function makeBlog() {
  const tokenFilePath = path.resolve('token.json');
  const oauth2Client = new google.auth.OAuth2(
    '57846126812-28d2644gb1cg29easfrgbtqsn3um1nor.apps.googleusercontent.com', // Replace with your client ID
    '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', // Replace with your client secret
    'http://localhost:3000/oauth2callback' // Redirect URI
  );

  const SCOPES = ['https://www.googleapis.com/auth/blogger'];

  const prompt = "Write a 5-10 page detailed blog post on a unique and interesting scientific topic. The topic should explore a lesser-known scientific law, theory, or phenomenon. Make sure to cover the topic in-depth, including its historical context, key principles, real-world applications, and the impact it has had on science and technology. The blog should be engaging, informative, and suitable for a general audience. It should not repeat any topics that have been covered in previous blog postsFocus on topics related to various scientific fields, including physics, biology, chemistry, astronomy, and more. The blog should explore new and thought-provoking questions or discoveries in science. Do not repeat the same topic from previous blogs; each blog must be based on a fresh and exciting scientific law, theory, or question.Ensure the blog is around 5-10 pages in length, providing ample explanation, context, and examples. The tone should be informative yet approachable, with clear explanations for complex ideas.Please ensure that the blog is formatted in clean HTML. Use proper HTML tags like <h1>, <h2>, <p>, and <ul> for headings, paragraphs, and lists. Avoid using markdown symbols such as asterisks * or hashtags #. Ensure the blog is visually appealing when pasted into a blog editor, with clear, structured formatting for easy readability. do not make <html> and <head> and <body> tag only write content in between of the body tag";

  // Check if token exists locally
  if (fs.existsSync(tokenFilePath)) {
    const tokens = JSON.parse(fs.readFileSync(tokenFilePath, 'utf-8'));
    oauth2Client.setCredentials(tokens);
    console.log('Using saved token...');
    postBlogToBlogger();
  } else {
    const authorizeUrl = oauth2Client.generateAuthUrl({
      access_type: 'offline',
      scope: SCOPES,
      prompt: 'consent',
    });

    open(authorizeUrl);
    console.log('Please authorize the app in the browser...');

    http.createServer((req, res) => {
      const urlParts = req.url.split('?');
      if (urlParts.length > 1) {
        const params = new URLSearchParams(urlParts[1]);
        const code = params.get('code');

        if (code) {
          oauth2Client.getToken(code, (err, tokens) => {
            if (err) {
              console.error('Error retrieving access token', err);
              res.writeHead(500, { 'Content-Type': 'text/plain' });
              res.end('Error retrieving access token');
              return;
            }

            oauth2Client.setCredentials(tokens);
            console.log('Access token:', tokens.access_token);

            // Save the token to file for future use
            fs.writeFileSync(tokenFilePath, JSON.stringify(tokens));
            console.log('Token saved to', tokenFilePath);

            res.writeHead(200, { 'Content-Type': 'text/plain' });
            res.end('Authorization successful! You can close this page.');

            // Now use the token to interact with the Blogger API
            postBlogToBlogger();
          });
        }
      }
    }).listen(3000, () => {
      console.log('Server running at http://localhost:3000');
    });
  }

  async function generateBlogContent() {
    try {
      const response = await model.generateContent([prompt]);
      return response?.response?.text();
    } catch (error) {
      console.error('Error generating blog content:', error);
    }
  }

  async function postBlogToBlogger() {
    try {
      const content = await generateBlogContent();

      const blogger = google.blogger({ version: 'v3', auth: oauth2Client });

      const response = await blogger.posts.insert({
        blogId: '5038220757806821788', // Replace with your Blogger blog ID
        requestBody: {
          content, // Content generated by the AI
        },
      });

      console.log('Blog post created:', response.data.title);
    } catch (error) {
      console.error('Error posting blog to Blogger:', error);
    }
  }

  setInterval(makeBlog, 3600000);
}